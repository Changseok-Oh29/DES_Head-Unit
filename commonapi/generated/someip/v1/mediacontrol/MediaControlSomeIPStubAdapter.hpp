/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_MEDIACONTROL_MEDIA_CONTROL_SOMEIP_STUB_ADAPTER_HPP_
#define V1_MEDIACONTROL_MEDIA_CONTROL_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/mediacontrol/MediaControlStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace mediacontrol {

template <typename _Stub = ::v1::mediacontrol::MediaControlStub, typename... _Stubs>
class MediaControlSomeIPStubAdapterInternal
    : public virtual MediaControlStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> MediaControlSomeIPStubAdapterHelper;

    ~MediaControlSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        MediaControlSomeIPStubAdapterHelper::deinit();
    }

    void fireVolumeChangedEvent(const float &_newVolume);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::mediacontrol::MediaControlStub,
        CommonAPI::Version
    > getMediaControlInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::mediacontrol::MediaControlStub,
        std::tuple< >,
        std::tuple< float>,
        std::tuple< >,
        std::tuple< CommonAPI::EmptyDeployment>
    > getVolumeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::mediacontrol::MediaControlStub,
        std::tuple< float>,
        std::tuple< >,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< >
    > setVolumeStubDispatcher;
    
    MediaControlSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        MediaControlSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< MediaControlStub>(_stub)),
        getMediaControlInterfaceVersionStubDispatcher(&MediaControlStub::lockInterfaceVersionAttribute, &MediaControlStub::getInterfaceVersion, false, true),
        getVolumeStubDispatcher(
            &MediaControlStub::getVolume,
            false,
            _stub->hasElement(0),
            std::make_tuple(),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))
        
        ,
        setVolumeStubDispatcher(
            &MediaControlStub::setVolume,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple())
        
    {
        MediaControlSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7d1) }, &getVolumeStubDispatcher );
        MediaControlSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7d2) }, &setVolumeStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1235));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9ca4), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireVolumeChangedEvent(const float &_newVolume) {
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  float
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9ca4),
            false,
            _newVolume
    );
}


template <typename _Stub, typename... _Stubs>
void MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::mediacontrol::MediaControlStub, typename... _Stubs>
class MediaControlSomeIPStubAdapter
    : public MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    MediaControlSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          MediaControlSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace mediacontrol
} // namespace v1

#endif // V1_MEDIACONTROL_Media_Control_SOMEIP_STUB_ADAPTER_HPP_
