/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/vehiclecontrol/VehicleControlSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace vehiclecontrol {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createVehicleControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< VehicleControlSomeIPProxy>(_address, _connection);
}

void initializeVehicleControlSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:vehiclecontrol.VehicleControl:v1_0:vehiclecontrol.VehicleControl",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "vehiclecontrol.VehicleControl:v1_0",
        &createVehicleControlSomeIPProxy);
}

INITIALIZER(registerVehicleControlSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeVehicleControlSomeIPProxy);
}

VehicleControlSomeIPProxy::VehicleControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          vehicleStateChanged_(*this, 0x1234, CommonAPI::SomeIP::event_id_t(0x9c40), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr))),
          gearChanged_(*this, 0x1234, CommonAPI::SomeIP::event_id_t(0x9c41), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)))
{
}

VehicleControlSomeIPProxy::~VehicleControlSomeIPProxy() {
    completed_.set_value();
}


VehicleControlSomeIPProxy::VehicleStateChangedEvent& VehicleControlSomeIPProxy::getVehicleStateChangedEvent() {
    return vehicleStateChanged_;
}
VehicleControlSomeIPProxy::GearChangedEvent& VehicleControlSomeIPProxy::getGearChangedEvent() {
    return gearChanged_;
}

void VehicleControlSomeIPProxy::setGearPosition(std::string _gear, CommonAPI::CallStatus &_internalCallStatus, bool &_success, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_gear(_gear, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_success(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7530),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_gear,
        _internalCallStatus,
        deploy_success);
    _success = deploy_success.getValue();
}

std::future<CommonAPI::CallStatus> VehicleControlSomeIPProxy::setGearPositionAsync(const std::string &_gear, SetGearPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_gear(_gear, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_success(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7530),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_gear,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _success) {
            if (_callback)
                _callback(_internalCallStatus, _success.getValue());
        },
        std::make_tuple(deploy_success));
}

void VehicleControlSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> VehicleControlSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace vehiclecontrol
} // namespace v1
